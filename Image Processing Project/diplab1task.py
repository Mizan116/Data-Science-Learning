# -*- coding: utf-8 -*-
"""DIPLab1Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r8EOjCQF4ymPal5v8nYsePEiZJpl5p7R

**Read the image in RGB and its shape**
"""

import cv2
from google.colab.patches import cv2_imshow

# Load the image
img_path = '/content/john.jpeg'
img = cv2.imread(img_path, 1)

# Convert the color format if needed


cv2_imshow(img)
print("Image shape:", img.shape)

"""**Read the image in grayscale and its shape**"""

gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray_img)
print("Image shape:", img.shape)

"""**2) What are the values of pixel at location (10,10) , (50,100) and (120,201) for both type
of images? **
"""

pixels_rgb = [img[10, 10], img[50, 100], img[120, 201]]
print(f"RGB pixel values at (10,10), (50,100), (120,201): {pixels_rgb}")

pixels_gray = [gray_img[10, 10], gray_img[50, 100], gray_img[120, 201]]
print(f"Grayscale pixel values at (10,10), (50,100), (120,201): {pixels_gray}")

"""**Read Image from Height 50-200 Pixel and Width 10-40 Pixel **"""

cropped_image = img[50:200, 10:40]
cv2_imshow(cropped_image)
print(f"Cropped image dimensions: {cropped_image.shape}")

"""Draw a rectangle on an image of red color and line width 5."""

image_with_rectangle = img.copy()
top_left_corner = (100, 100)  # Example coordinates
bottom_right_corner = (20, 20)  # Example coordinates
rectangle_color = (0, 0, 255)  # Red color in BGR
line_width = 5
rec_img = cv2.rectangle(image_with_rectangle, top_left_corner, bottom_right_corner, rectangle_color, line_width)
cv2_imshow(rec_img)

"""**) Write your name and ID number on your image**"""

font = cv2.FONT_HERSHEY_SIMPLEX
text_color = (0, 0, 250)  # White color in BGR format

# Put the text on the image
cv2.putText(img, "Mizan", (10, 40), font, 1, text_color, 2)
cv2.putText(img, "1904116", (20, 200), font, 1, text_color, 2)

# Display the image
cv2_imshow(img)



"""**Task 2**"""

img_path = '/content/john.jpeg'
img = cv2.imread(img_path, 1)

height, width = img.shape[:2]
border_width = int(width * 0.1)
border_height = int(height * 0.1)

# Add borders around the image
bordered_img = cv2.copyMakeBorder(
    img,
    top=border_height,
    bottom=border_height,
    left=border_width,
    right=border_width,
    borderType=cv2.BORDER_CONSTANT,
    value=(0, 0, 0)  # Black color
)

# Display the image with borders
cv2_imshow(bordered_img)



"""**Task 3**"""

import numpy as np
def create_image_with_boxes(size=(500, 500), box_size_factor=8):
    # Create a white image
    image = np.ones((size[0], size[1], 3), dtype=np.uint8) * 255

    # Define colors
    colors = [(0, 0, 255), (0, 255, 0), (255, 0, 0), (0, 0, 0)]  # Red, Green, Blue, Black

    # Calculate box size
    box_height = size[0] // box_size_factor
    box_width = size[1] // box_size_factor

    # Add colored boxes to each corner
    for i, color in enumerate(colors):
        row_start = i // 2 * (size[0] - box_height)
        col_start = (i % 2) * (size[1] - box_width)
        image[row_start:row_start + box_height, col_start:col_start + box_width] = color

    return image
image = create_image_with_boxes((500, 500), box_size_factor=8)
cv2_imshow( image)



"""**Task 4**"""

img_path = '/content/fav.jpeg'
img = cv2.imread(img_path, 1)

# Convert the color format if needed


cv2_imshow(img)
print("Image shape:", img.shape)

flipped_horizontal = cv2.flip(img, 1)
flipped_vertical = cv2.flip(img, 0)
flipped_both = cv2.flip(img, -1)

cv2_imshow(flipped_horizontal)

cv2_imshow(flipped_vertical)

cv2_imshow(flipped_both)

rot_90 = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)
cv2_imshow(rot_90)

rot_180 = cv2.rotate(img, cv2.ROTATE_180)
cv2_imshow(rot_180)

rot_270 = cv2.rotate(img, cv2.ROTATE_90_COUNTERCLOCKWISE)
cv2_imshow(rot_270)

h_concat_image = cv2.hconcat([img,rot_180])
print(h_concat_image.shape)
cv2_imshow(h_concat_image)

v_concat_image = cv2.vconcat([rot_90,rot_270])
print(v_concat_image.shape)
cv2_imshow(v_concat_image)

v_concat_image = cv2.hconcat([flipped_horizontal,img])
print(v_concat_image.shape)
cv2_imshow(v_concat_image)

v_concat_image = cv2.hconcat([img, flipped_vertical])
print(v_concat_image.shape)
cv2_imshow(v_concat_image)